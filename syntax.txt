program: declaration*

declaration: varDeclaration | funDeclaration | statement
varDeclaration: "var" IDENTIFIER ("=" expression)? ";"
funDeclaration: "fun" function
function: IDENTIFIER "(" parameters? ")" blockStatement
parameters: IDENTIFIER ("," IDENTIFIER)*

statement: expressionStatement | printStatement | blockStatement | ifStatement | whileStatement | forStatement
expressionStatement: expression ";"
printStatement: "print" expression ";"
blockStatement: "{" declaration* "}"
ifStatement: "if" "(" expression ")" statement ("else" statement)?
whileStatement: "while" "(" expression ")" statement
forStatement: "for" "(" (varDeclaration | expressionStatement | ";") expression? ";" expression ")" statement
breakStatement: "break" ";"
continueStatement: "continue" ";"

expression: comma
comma: comma "," assignment | assignment
assignment: IDENTIFIER "=" assignment | logicalOr
logicalOr: logicalAnd ("or" logicalAnd)*
logicalAnd: equality ("and" equality)*
equality: comparison (("!=" | "==" ) comparison)*
comparison: term (("<" | ">" | "<=" | ">=") term)*
term: factor (("-" | "+") factor)*
factor: unary (("*" | "/") unary)*
unary: ("-" | "!") unary | call
call: primary ("(" arguments? ")")*
arguments: expression ("," expression)*

primary: STRING | NUMBER | "true" | "false" | "nil" | IDENTIFIER | "(" expression ")"
